
inf :: (T, ..) = (T-(N*@), ..)

// `..` for repetition
// whatever is before .. will be repeated
// so if the pattern is (T, N, ..), 
//     only lists with an even number of elements will be matched

// `@` for the current location in the repetition
// 0 - indexed
// Same for each repeating group, so for rule (T#, N#, ..) =  (T + @, N + @, ..),/
//     @ will be the same for each pair of (T, N)