s1 :: 1 = s(0)
s2 :: 2 = s(1)
s3 :: 3 = s(2)
s4 :: 4 = s(3)
sum_id :: 0 + A = A
sum_comm :: A + B = B + A
sum :: s(A) + B = s(A + B)
sub_id :: A - 0 = A
sub :: s(A) - s(B) = A - B
diff_id :: A - A = 0
mul_sum_dist :: A*(B + C) = A*B + A*C
mul_assoc :: A*(B*C) = (A*B)*C
div_sub_dist :: (A - B)/C = A/C - B/C
div_sum_dist :: (A + B)/C = A/C + B/C
pow :: A^s(B) = A*A^B
lim_def :: lim(Var, Value, Expr) = apply_rule(0, Var, Value, Expr)
lim_sum_dist :: lim(Var, Value, A + B) = lim(Var, Value, A) + lim(Var, Value, B)
square :: A^2 = A*A
dist_mul_add :: A*(B + C) = A*B + A*C
mul_comm :: A*B = B*A
sum_assoc :: (A + B) + C = A + (B + C)
double_sum :: A + A = 2*A
square_of_sum :: (a + b)^2 = a^2 + (2*(a*b) + b^2)
cube_of_sum :: (A + B)^3 = A*(A + B)^2 + B*(A + B)^2

test :: test(X) = X
test("bruh")